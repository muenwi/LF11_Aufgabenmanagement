@page "/task/user/overview"
@using TaskApp.Api.Interfaces
@using System.Security.Claims
@using TaskApp.Api.Models
@using TaskApp.Identity.Models
@attribute [Authorize]
@attribute [StreamRendering]
@inject ITaskController _taskController

<PageTitle>persönlichen Aufgaben</PageTitle>

<h1>Deine persönlichen Aufgaben</h1>

<DataGrid TItem="TaskModel"
          Data="@tasks"
          ReadData="@OnReadData"
          TotalItems="@totalTasks"
          PageSize="1"
          ShowPager
          Responsive>
    <DataGridCommandColumn />
    <DataGridColumn Field="@nameof(TaskModel.Title)" Caption="Title" Editable />
    <DataGridColumn Field="@nameof(TaskModel.Description)" Caption="Description" Editable />
    <DataGridColumn Field="@nameof(TaskModel.Role)" Caption="Role" Editable />
    <DataGridColumn Field="@nameof(TaskModel.Status)" Caption="Status"  Editable/>
    <DataGridColumn Field="@nameof(TaskModel.Created)" Caption="Created" Editable/>
</DataGrid>

@code {
    private List<TaskModel> tasks;

    protected override async Task OnInitializedAsync()
    {
        tasks = await _taskController.GetTasksByUserAsync();;
        await base.OnInitializedAsync();
    }

    private int totalTasks;

    private async Task OnReadData( DataGridReadDataEventArgs<TaskModel> e )
    {
        if ( !e.CancellationToken.IsCancellationRequested )
        {
            List<TaskModel> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            if ( e.ReadDataMode is DataGridReadDataMode.Virtualize )
                response = (await _taskController.GetTasksByUserAsync()).Skip( e.VirtualizeOffset ).Take( e.VirtualizeCount ).ToList();
            else if ( e.ReadDataMode is DataGridReadDataMode.Paging )
                response = (await _taskController.GetTasksByUserAsync()).Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
            else
                throw new Exception( "Unhandled ReadDataMode" );

            if ( !e.CancellationToken.IsCancellationRequested )
            {
                totalTasks = (await _taskController.GetTasksByUserAsync()).Count;
                tasks = new List<TaskModel>( response ); // an actual data for the current page
            }
        }
    }


}
@* @if (Tasks == null || loggedInUser == null || claims.Count() <= 0)
{
    <p><em>Deine Aufgaben werden geladen...</em></p>
}
else
{
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3">Bezeichung</th>
                    <th scope="col" class="px-6 py-3">Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Tasks)
                {
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                        <td class="px-6 py-4">@task.Title</td>
                        <td class="px-6 py-4">@task.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>    *@
}

@* @code {
    List<TaskModel> Tasks = new List<TaskModel>();
    UserBasic loggedInUser;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    { 
        if (AuthState == null)
        {
            return;
        }
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var authState = await AuthState;
        claims = authState.User.Claims;

        Tasks = await _taskController.GetTasksByUserAsync();
        StateHasChanged();
    }

} *@
