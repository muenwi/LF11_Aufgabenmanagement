@page "/task/user/overview"
@using System.Drawing
@using TaskApp.Api.Interfaces
@using System.Security.Claims
@using TaskApp.Api.Models
@using TaskApp.Identity.Models
@attribute [Authorize]
@attribute [StreamRendering]
@inject ITaskController _taskController

<PageTitle>persönlichen Aufgaben</PageTitle>

<h1>Deine persönlichen Aufgaben</h1>

<DataGrid TItem="TaskModel"
          Data="@tasks"
          ReadData="@OnReadData"
          TotalItems="@totalTasks"
          SelectedRow="@selectedTask"
          RowContextMenu="@OnRowContextMenu"
          RowContextMenuPreventDefault="true"
          PageSize="20"
          ShowPager
          Responsive
          Sortable
          SortMode="DataGridSortMode.Single">
    <DataGridCommandColumn />
    <DataGridColumn Field="@nameof(TaskModel.Title)" Caption="Titel" Editable />
    <DataGridColumn Field="@nameof(TaskModel.Description)" Caption="Beschreibung" Editable />
    <DataGridColumn Field="@nameof(TaskModel.Status)" Caption="Status"  Editable/>
     <DataGridColumn Field="@nameof(TaskModel.StartDate)" Caption="Erstellt am" Editable />
 </DataGrid>


 @if (showContextMenu && selectedTask != null)
{
    <Div Position="Position.Fixed" Background="Background.Transparent" Style="@($"left:{contextMenuPos.X}px;top:{contextMenuPos.Y}px;")">
        <ListGroup>
            <ListGroupItem>
                <button @onclick="@(()=>OnContextItemEditClicked(contextMenueTask))"
                        type="button"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    <Icon Name="IconName.Edit" TextColor="TextColor.Secondary"></Icon>
                    Aufgabe bearbeiten
                </button>
            </ListGroupItem>
            <ListGroupItem>
                <button @onclick="@(()=>OnContextItemDeleteClicked(contextMenueTask))"
                        type="button"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    <Icon Name="IconName.Delete" TextColor="TextColor.Secondary"></Icon>
                    Aufgabe löschen
                </button>
            </ListGroupItem>
        </ListGroup>
    </Div>
}

@if (showEditModal)
{
    <TaskAppModal @ref="editModalRef" />
}


@code {
    private List<TaskModel> tasks = new List<TaskModel>();
    private TaskModel selectedTask;
    private TaskAppModal editModalRef;
    private DataGrid<TaskModel> dataGridRef;

    bool showContextMenu = false;
    private bool showEditModal = false;
    TaskModel contextMenueTask;
    Point contextMenuPos;

    protected override async Task OnInitializedAsync()
    {
        tasks = await _taskController.GetTasksByUserAsync();;
        await base.OnInitializedAsync();
    }

    private int totalTasks;

    private async Task OnReadData( DataGridReadDataEventArgs<TaskModel> e )
    {
        if ( !e.CancellationToken.IsCancellationRequested )
        {
            List<TaskModel> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            if ( e.ReadDataMode is DataGridReadDataMode.Virtualize )
                response = (await _taskController.GetTasksByUserAsync()).Skip( e.VirtualizeOffset ).Take( e.VirtualizeCount ).ToList();
            else if ( e.ReadDataMode is DataGridReadDataMode.Paging )
                response = (await _taskController.GetTasksByUserAsync()).Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
            else
                throw new Exception( "Unhandled ReadDataMode" );

            if ( !e.CancellationToken.IsCancellationRequested )
            {
                totalTasks = (await _taskController.GetTasksByUserAsync()).Count;
                tasks = new List<TaskModel>( response ); // an actual data for the current page
            }
        }
    }


    protected Task OnRowContextMenu(DataGridRowMouseEventArgs<TaskModel> eventArgs)
    {
        showContextMenu = true;
        contextMenueTask = eventArgs.Item;
        showEditModal = true;
        contextMenuPos = eventArgs.MouseEventArgs.Client;

        return Task.CompletedTask;
    }

    protected async Task OnContextItemEditClicked(TaskModel task)
    {
        showContextMenu = false;
        await editModalRef.ShowModalEdit(task);
    }

    protected async Task OnContextItemDeleteClicked(TaskModel task)
    {
        await dataGridRef.Delete(task);

        showContextMenu = false;
    }

    private Task ShowModal()
    {
        return editModalRef.ShowModal();
    }

    private Task HideModal()
    {
        return editModalRef.HideModal();
    }
}
