@page "/task/role/overview"
@using TaskApp.Api.Interfaces
@using System.Security.Claims
@using TaskApp.Api.Models
@using TaskApp.Identity.Models
@attribute [Authorize]
@attribute [StreamRendering]
@inject ITaskController _taskController

<PageTitle>persönlichen Aufgaben</PageTitle>

<h3>Aufgaben deiner Rolle.</h3>

<DataGrid TItem="TaskModel"
          Data="@tasks"
          ReadData="@OnReadData"
          TotalItems="@totalTasks"
          PageSize="20"
          ShowPager
          Responsive
          Sortable
           SortMode="DataGridSortMode.Single">
     <DataGridCommandColumn />
     <DataGridColumn Field="@nameof(TaskModel.Title)" Caption="Title" Editable />
     <DataGridColumn Field="@nameof(TaskModel.Description)" Caption="Description" Editable />
     <DataGridColumn Field="@nameof(TaskModel.Role)" Caption="Role" Editable />
     <DataGridColumn Field="@nameof(TaskModel.Status)" Caption="Status" Editable />
     <DataGridColumn Field="@nameof(TaskModel.Created)" Caption="Created" Editable />
 </DataGrid>

 @code {
    private List<TaskModel> tasks = new List<TaskModel>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await _taskController.GetTasksByUserAsync(); ;
        await base.OnInitializedAsync();
    }

    private int totalTasks;

    private async Task OnReadData(DataGridReadDataEventArgs<TaskModel> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            List<TaskModel> response = new List<TaskModel>();

            // this can be call to anything, in this case we're calling a fictional api
            if (e.ReadDataMode is DataGridReadDataMode.Virtualize)
                response = (await _taskController.GetTasksByRoleAsync()).Skip(e.VirtualizeOffset).Take(e.VirtualizeCount).ToList();
            else if (e.ReadDataMode is DataGridReadDataMode.Paging)
                response = (await _taskController.GetTasksByRoleAsync()).Skip((e.Page - 1) * e.PageSize).Take(e.PageSize).ToList();
            else
                throw new Exception("Unhandled ReadDataMode");

            if (!e.CancellationToken.IsCancellationRequested)
            {
                totalTasks = (await _taskController.GetTasksByRoleAsync()).Count;
                tasks = new List<TaskModel>(response); // an actual data for the current page
            }
        }
    }
}
