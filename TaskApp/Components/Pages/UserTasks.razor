@page "/userTasks"
@using ServerApp.Entities.User
@using ServerApp.Entities.Task
@using ServerApp.Services

@attribute [StreamRendering]

<PageTitle>persönlichen Aufgaben</PageTitle>

<h1>Deine persönlichen Aufgaben</h1>

@if (Tasks == null || loggedInUser == null)
{
    <p><em>Deine Aufgaben werden geladen...</em></p>
}
else
{
    <div style="display: flex; justify-content: flex-end;">
        <p>@loggedInUser.Vorname @loggedInUser.Nachname</p>
    </div>

    <table class="table">
        <thead>
            <tr>
                //todo: Anpassen!
                <th>Priorität</th>
                <th>Nummer</th>
                <th>Bezeichung</th>
                <th>Status</th>
                <th>Erstelldatum</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach (var task in Tasks)
            {
                <tr>
                    //todo: Anpassen!
                    <td>@task.Priorität</td>
                    <td>@task.Nummer</td>
                    <td>@task.Bezeichnung</td>
                    <td>@task.Status</td>
                    <td>@task.CreateDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    List<EntityTask> Tasks;
    User loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        UserService userService = new UserService();
        Tasks = new List<EntityTask>();

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        loggedInUser = userService.GetLoggedInUser();
        Tasks = loggedInUser.Tasks;
        StateHasChanged();
    }
}
