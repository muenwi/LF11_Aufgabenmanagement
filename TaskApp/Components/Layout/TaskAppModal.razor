@using TaskApp.Api.Interfaces
@using TaskApp.Api.Models
@using static TaskApp.Api.Models.RoleModel
@inject ITaskController _taskController
@inject AuthenticationStateProvider _authenticationStateProvider

        <Tooltip Text="Aufgabe erstellen" Placement="TooltipPlacement.Left" AppendTo="#floating-action-button">
            <button id="floating-action-button" Color="Color.Light" @onclick="@ShowModal" class="w-16 h-16 fixed bottom-3 text-white right-14 flex justify-center items-center select-none border-2 text-white text-xl p-2 m-2 rounded-full shadow h-10 w-10 bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                <svg class="fill-white" xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 448 512"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"/></svg>
            </button>
        </Tooltip>
        <Modal @ref="modalRef">
            <ModalContent Centered>
                <ModalHeader>
                    <ModalTitle>Aufgabe erstellen</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <form>
                    <Field>
                        <FieldLabel>Titel</FieldLabel>
                            <TextEdit Autofocus="true" @bind-Text="@Model.Title" Placeholder="Aufgaben Titel eingeben..." />
                    </Field>
                    <Field>
                        <FieldLabel>Beschreibung</FieldLabel>
                            <textarea @bind="@Model.Description" Placeholder="Beschreibung eingeben..." class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                    </Field>
                    <Field >
                        <FieldLabel>Aufgabenstatus</FieldLabel>
                            <Select @bind-SelectedValue="@Model.Status" TValue="string">
                            @foreach (var name in Enum.GetNames(typeof(Status)))
                            {
                                <option>@name</option>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Rolle</FieldLabel>
                            <Select @bind-SelectedValue="@Model.Role" TValue="string">
                            @foreach (var name in Enum.GetNames(typeof(RoleName)))
                            {
                                <option>@name</option>
                            }
                        </Select>
                    </Field>
                <Field>
                    <FieldLabel>Nutzer</FieldLabel>
                    <Select @bind-SelectedValue="@Model.UserId" TValue="string">
                        @foreach (var name in Users)
                        {
                            <option>@name.UserName</option>
                        }
                    </Select>
                </Field>
                    
                    </form>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="@HideModal">Schließen</Button>
                    <Button Color="Color.Primary" Clicked="@Submit">Speichern</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

@code {
    [SupplyParameterFromForm]
    public TaskModel Model { get; set; } = new TaskModel();
    [SupplyParameterFromForm]
    public List<UserModel> Users { get; set; }

    // reference to the modal component
    private Modal modalRef;

    protected override async Task OnInitializedAsync()
    {
        Users =  new List<UserModel>();
        Users = await _taskController.GetAllUserAsync();


        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        Model.UserId = Users.FirstOrDefault(x => x.UserName.Equals(authenticationState.User.Identity?.Name))?.UserName ?? string.Empty;

        await base.OnInitializedAsync();
    }

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task Submit()
    {
        if (Model is null) throw new Exception();

        await _taskController.CreateTask(Model);

        await modalRef.Hide();
    }
}